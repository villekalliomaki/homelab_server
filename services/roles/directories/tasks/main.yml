---
# tasks file for directories

- name: Check permission arguments exist
  ansible.builtin.assert:
      that:
          - service.name
          - service.user
      fail_msg: Service name and user missing

#
# Container volume and subdirectories
#
- name: Container volume
  ansible.builtin.file:
      path: "{{ filesystem.container_volumes }}/{{ service.name }}"
      state: directory
      recurse: "{{ directories_container_volume.recurse | default(true) }}"
      owner: "{{ service.user }}"
      group: "{{ directories_container_volume.group | default(service.user) }}"
      mode: "{{ directories_container_volume.mode | default(directories_default_mode) }}"
  when: directories_container_volume is not undefined and directories_container_volume.create
  register: dirs_container_volume

- name: Container volume subdirectories
  ansible.builtin.file:
      path: "{{ filesystem.container_volumes }}/{{ service.name }}/{{ item }}"
      state: directory
      recurse: "{{ directories_container_volume.recurse | default(true) }}"
      owner: "{{ service.user }}"
      group: "{{ directories_container_volume.group | default(service.user) }}"
      mode: "{{ directories_container_volume.mode | default(directories_default_mode) }}"
  when: directories_container_volume is not undefined and directories_container_volume.create
  loop: "{{ directories_container_volume.subdirectories }}"
  register: dirs_container_volume_subdirectories

#
# Container logs
#
- name: Container logs
  ansible.builtin.file:
      path: "{{ filesystem.container_logs }}/{{ service.name }}"
      state: directory
      recurse: "{{ directories_container_logs.recurse | default(true) }}"
      owner: "{{ service.user }}"
      group: "{{ directories_container_logs.group | default(service.user) }}"
      mode: "{{ directories_container_logs.mode | default(directories_default_mode) }}"
  when: directories_container_logs is not undefined and directories_container_logs.create
  register: dirs_container_logs

- name: Container logs subdirectories
  ansible.builtin.file:
      path: "{{ filesystem.container_logs }}/{{ service.name }}/{{ item }}"
      state: directory
      recurse: "{{ directories_container_logs.recurse | default(true) }}"
      owner: "{{ service.user }}"
      group: "{{ directories_container_logs.group | default(service.user) }}"
      mode: "{{ directories_container_logs.mode | default(directories_default_mode) }}"
  when: directories_container_logs is not undefined and directories_container_logs.create
  loop: "{{ directories_container_logs.subdirectories }}"
  register: dirs_container_logs_subdirectories

#
# Container cache
#
- name: Container cache
  ansible.builtin.file:
      path: "{{ filesystem.cache }}/{{ service.name }}"
      state: directory
      recurse: "{{ directories_container_cache.recurse | default(true) }}"
      owner: "{{ service.user }}"
      group: "{{ directories_container_cache.group | default(service.user) }}"
      mode: "{{ directories_container_cache.mode | default(directories_default_mode) }}"
  when: directories_container_cache is not undefined and directories_container_cache.create
  register: dirs_container_cache

- name: Container cache subdirectories
  ansible.builtin.file:
      path: "{{ filesystem.cache }}/{{ service.name }}/{{ item }}"
      state: directory
      recurse: "{{ directories_container_cache.recurse | default(true) }}"
      owner: "{{ service.user }}"
      group: "{{ directories_container_cache.group | default(service.user) }}"
      mode: "{{ directories_container_cache.mode | default(directories_default_mode) }}"
  when: directories_container_cache is not undefined and directories_container_cache.create
  loop: "{{ directories_container_cache.subdirectories }}"
  register: dirs_container_cache_subdirectories
